Niha Imam
Code Reading


What are the ELF magic numbers?
> They are the first 4 bytes of e_indent, the array of bytes that specifies how the file should be interpreted, are 3x7f, 'E', 'L', 'F', respectively. The subsequent fields indicate the file class, data encoding, ELF version, OS/syscall ABI identification, and syscall ABI version.


What is the difference between UIO_USERISPACE and UIO_USERSPACE? When should one use UIO_SYSSPACE instead?
> UIO_USERISPACE and UIO_USERSPACE stand for user process code and user process data respectively. One should use UIO_SYSSPACE when writing data to a kernel buffer.


Why can the struct uio that is used to read in a segment be allocated on the stack in load_segment() (i.e., where does the memory read actually go)?
> The uio struct contains a iovec, which wraps a buffer that is the destination of the memory read. The uio, however, also specifies the address space as that of the current thread, so the read happen into the user address space.


In runprogram(), why is it important to call vfs_close() before going to usermode?
> Once we've loaded the executable, we no longer need a reference to the file. If we don't close the vnode before warping to user mode in another process, we will never close the file and have a memory leak.


What function forces the processor to switch into usermode? Is this function machine dependent?
> enter_new_process(), located in trap.c, forces the processor to switch into usermode. It is machine dependent--Passing argc/argv may use additional stack space on some other platforms, but not on mips.


In what file are copyin and copyout defined? memmove? Why can't copyin and copyout be implemented as simply as memmove?
> copyin() and copyout() are defined in copyinout.c and memmove() is defined in memmove.c. copyin()/copyout() copies block of memory across user/kernel addresses ensuring that user pointers are not accessing offlimit addresses, something that memmove() is not capable of doing.


What (briefly) is the purpose of userptr_t?
> It is used for noting that the provided address needs to be within the proper userspace region.


What is the numerical value of the exception code for a MIPS system call?
> #define EX_SYS 8


Why does mips_trap() set curspl to SPL_HIGH "manually", instead of using splhigh()?
>


How many bytes is an instruction in MIPS? (Answer this by reading syscall() carefully, not by looking somewhere else.)
> 4 bytes, the amount the program counter is advanced before syscall returns


Why do you "probably want to change" the implementation of kill_curthread()?
> We don't want the kernel to panic when a user-level code hits a fatal fault.


What would be required to implement a system call that took more than 4 arguments?
> Additional arguments would need to be fetched from the user-level stack starting at sp+16.


What is the purpose of the SYSCALL macro?
> The SYSCALL() macro allows for a single shared system call dispatcher by loading a number into the v0 register (where the dispatcher expects to find it) and jumping to the shared code.


What is the MIPS instruction that actually triggers a system call? (Answer this by reading the source in this directory, not looking somewhere else.)
> Line 85 of syscalls-mips.S, which executes the instruction "syscall"


